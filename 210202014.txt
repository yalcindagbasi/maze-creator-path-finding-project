//Arayuz Sınıfı
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;


public class Arayuz extends JFrame {
    JFrame anaFrame= new JFrame();
    static JPanel[][] cell = new JPanel[100][100];
    JTextField mazeSize;
    JButton baslaButonu;
    JButton bitirButonu;
    int heightFrame=800;
    int widthFrame=1400;
    int speed=50;
    boolean firstTime=false;
    int satir=30;
    int sutun=30;
    int boyut=20;
    int bloksayaci=0;
    boolean bittiMi=false;

    static long beginTime = 0;
    static long endTime = 0;
    static Label timeLabel = new Label();
    static Label blokLabel = new Label();
    Arayuz() {
        anaFrame.setLayout(null);
        anaFrame.setBounds(0,0,widthFrame+20,heightFrame+50);
        anaFrame.setResizable(true);
        anaFrame.setDefaultCloseOperation(EXIT_ON_CLOSE);
        anaFrame.setVisible(true);
        mazeSize= new JTextField();
        baslaButonu= new JButton();
        bitirButonu= new JButton();
        anaFrame.getContentPane().add(mazeSize);
        anaFrame.getContentPane().add(baslaButonu);
        anaFrame.getContentPane().add(bitirButonu);
        mazeSize.setBounds(1050,50,300,50);
        baslaButonu.setBounds(1050,150,300,100);
        bitirButonu.setBounds(1050,300,300,100);
        baslaButonu.setText("BASLA");
        bitirButonu.setText("Hemen Bitir");
        timeLabel.setBounds(1050,500,300,100);
        timeLabel.setBackground(Color.pink);
        blokLabel.setBounds(1050,600,300,100);
        blokLabel.setBackground(Color.pink);
        anaFrame.add(timeLabel);
        anaFrame.add(blokLabel);
        beginTime = System.currentTimeMillis();
        baslaButonu.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                baslaButonu.setEnabled(false);

                if(firstTime)
                    for (int i = 0; i < boyut+1; i++) {
                        for (int j = 0; j < boyut+1; j++) {
                            anaFrame.remove(cell[i][j]);
                            cell[i][j]=null;
                        }
                    }
                firstTime=true;
                boyut=Integer.parseInt(mazeSize.getText());
                speed=700/boyut;

                (new Worker()).execute();




            }
        });
        bitirButonu.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                speed=0;

            }
        });

    }
    void labirentBoya(){
        int[][] labirent = MazeCreator.getMaze();
        for (int i = 0; i < sutun+1; i++) {
            for (int j = 0; j < satir+1; j++) {
                cell[i][j]=new JPanel();
                cell[i][j].setBounds(i*(widthFrame-400)/(sutun+1),j*heightFrame/(satir+1),(widthFrame-400)/(sutun+1)+1,heightFrame/(satir+1)+1);
                anaFrame.getContentPane().add(cell[i][j]);
                if(labirent[i][j]==1)
                    cell[i][j].setBackground(Color.darkGray);
                else
                    cell[i][j].setBackground(Color.gray);
                cell[i][j].setVisible(false);
            }
        }
    }
    class Worker extends SwingWorker<String, Object> {
        @Override
        public String doInBackground() {
            bloksayaci=0;
            beginTime = System.currentTimeMillis();
            MazeCreator.main(boyut,boyut);
            satir=MazeCreator.getWidth();
            sutun=MazeCreator.getHeight();
            labirentBoya();
            bittiMi=false;
            try {
                yolBul(1,1);
            } catch (InterruptedException ex) {
                throw new RuntimeException(ex);
            }
            baslaButonu.setEnabled(true);
            Arayuz.endTime = System.currentTimeMillis();
            System.out.println("Çalışma Süresi : " + ((double) (Arayuz.endTime - Arayuz.beginTime)) / 1000 + "Saniye "+"\n" );
            double gecenSure = ((double) (Arayuz.endTime - Arayuz.beginTime)) / 1000;
            Arayuz.timeLabel.setText("Geçen Süre : " + Double.toString((bloksayaci*0.0801232))+ "Saniye");
            Arayuz.blokLabel.setText("Geçilen blok sayısı : " +bloksayaci);
            System.out.println(bloksayaci);
            System.out.println(gecenSure/bloksayaci);
            System.out.println("onluk geçen süre:"+ (bloksayaci*0.0801232));
            for (int i = 0; i < sutun+1; i++) {
                for (int j = 0; j < satir+1; j++) {
                    cell[i][j].setVisible(true);
                }
                }
            return null;
        }
    }
    void yolBul(int satirkonum,int sutunkonum) throws InterruptedException {
        cell[satirkonum+1][sutunkonum-1].setVisible(true);
        cell[satirkonum+1][sutunkonum].setVisible(true);
        cell[satirkonum+1][sutunkonum+1].setVisible(true);
        cell[satirkonum][sutunkonum-1].setVisible(true);
        cell[satirkonum][sutunkonum].setVisible(true);
        cell[satirkonum][sutunkonum+1].setVisible(true);
        cell[satirkonum-1][sutunkonum-1].setVisible(true);
        cell[satirkonum-1][sutunkonum].setVisible(true);
        cell[satirkonum-1][sutunkonum+1].setVisible(true);
        int[][] labirent = MazeCreator.getMaze();
        if(bittiMi)
            return;
        labirent[satirkonum][sutunkonum]=1;
        if((satirkonum==satir-1 && sutunkonum==sutun-1)||(satirkonum==satir-2 && sutunkonum==sutun-2)){
            bittiMi=true;
            cell[satirkonum][sutunkonum].setBackground(Color.blue);
            return;
        }


        Thread.sleep(speed);
        bloksayaci++;
        cell[satirkonum][sutunkonum].setBackground(Color.blue);
        if( sutunkonum!=sutun-1 && labirent[satirkonum][sutunkonum+1]!=1)
            yolBul(satirkonum,sutunkonum+1);
        if( satirkonum!=satir-1 && labirent[satirkonum+1][sutunkonum]!=1)
            yolBul(satirkonum+1,sutunkonum);
        if(labirent[satirkonum-1][sutunkonum]!=1)
            yolBul(satirkonum-1,sutunkonum);
        if(labirent[satirkonum][sutunkonum-1]!=1)
            yolBul(satirkonum,sutunkonum-1);
        if(bittiMi)
            return;
        bloksayaci--;
        cell[satirkonum][sutunkonum].setBackground(Color.red);
        Thread.sleep(speed);

    }
    public static void main(String[] args) {
        new Arayuz();


    }
}

// Deneme Sınıfı
import java.util.*;

public class deneme {
    private int width;
    private int height;
    private static int[][] maze;
    private Random rand;

    public static int[][] getMaze() {
        return maze;
    }

    public deneme(int width, int height) {
        this.width = width;
        this.height = height;
        maze = new int[height+1][width+1];
        rand = new Random();
        for (int i = 0; i < width; i++) {
            for (int j = 0; j <height; j++) {
                maze[i][j]=1;
            }
        }
        generateMaze();
        for(int i=0; i<width;i++){
            maze[height][i]=1;
        }
        for(int i=0; i<height;i++){
            maze[i][width]=1;
        }
    }

    private void generateMaze() {
        // Start at a random cell
        //int startX = rand.nextInt(width);
        //int startY = rand.nextInt(height);
        int startX =1;
        int startY=1;
        maze[startY][startX] = 0;

        Stack<int[]> stack = new Stack<>();
        stack.push(new int[]{startY, startX});

        while (!stack.isEmpty()) {
            int[] current = stack.peek();
            int currentY = current[0];
            int currentX = current[1];

            // Get unvisited neighbors
            List<int[]> neighbors = getUnvisitedNeighbors(currentX, currentY);

            if (!neighbors.isEmpty()) {
                // Choose a random neighbor
                int[] neighbor = neighbors.get(rand.nextInt(neighbors.size()));
                int neighborY = neighbor[0];
                int neighborX = neighbor[1];

                // Remove the wall between the current and the chosen neighbor
                int wallY = (currentY + neighborY) / 2;
                int wallX = (currentX + neighborX) / 2;
                maze[wallY][wallX] = 0;
                maze[neighborY][neighborX] = 0;

                // Add the neighbor to the stack
                stack.push(neighbor);
            } else {
                // Backtrack if there are no unvisited neighbors
                stack.pop();
            }
        }
    }

    private List<int[]> getUnvisitedNeighbors(int x, int y) {
        List<int[]> neighbors = new ArrayList<>();

        // Check north neighbor
        if (y > 1 && maze[y - 2][x] == 1) {
            neighbors.add(new int[]{y - 2, x});
        }
        // Check south neighbor
        if (y < height - 2 && maze[y + 2][x] == 1) {
            neighbors.add(new int[]{y + 2, x});
        }
        // Check west neighbor
        if (x > 1 && maze[y][x - 2] == 1) {
            neighbors.add(new int[]{y, x - 2});
        }
        // Check east neighbor
        if (x < width - 2 && maze[y][x + 2] == 1) {
            neighbors.add(new int[]{y, x + 2});
        }

        return neighbors;
    }

    public void printMaze() {
        for (int[] row : maze) {
            for (int cell : row) {
                System.out.print(cell == 1 ? "+ " : "0 ");
            }
            System.out.println();
        }
    }

    public static void main() {

        MazeCreator mazeCreator = new MazeCreator(30, 30);
        mazeCreator.printMaze();
    }
}

//Izgara Sınıfı
import javax.swing.*;
import java.awt.*;
import java.io.*;
import java.net.URL;
import java.io.IOException;

public class izgara {
    static int sayac = 0;
    static int sayack = 0;
    static int satir = 0;
    static int sutun = 0;
    static String urlBir = "url1.txt";
    static String urliki = "url2.txt";
    static String normalHal = "http://bilgisayar.kocaeli.edu.tr/prolab2/";
    static String fileName = "http://bilgisayar.kocaeli.edu.tr/prolab2/" + urliki;

    public izgara(String file) throws IOException {
        URL url = new URL(file);
        String line;

        BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
        while ((line = br.readLine()) != null) {
            sayac++;
        }
        br.close();
        KareliEkran.labirentt = new int[sayac][sayac];
        KareliEkran.jp = new JPanel[sayac + 2][sayac + 2];
    }

    public static void dosyaOku(String filename) throws IOException {

        URL url = new URL(filename);
        String line;

        BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));

        while ((line = br.readLine()) != null) {

            for (int i = 0; i < line.length(); i++) {
                char c = line.charAt(sayack);
                if (sayack > sayac || sayack == sayac) {
                    break;
                } else {
                    KareliEkran.labirentt[satir][sutun] = Character.getNumericValue(c);
                    sutun++;
                }
                sayack++;
            }
            satir++;
            sutun = 0;
            sayack = 0;
        }
        br.close();
    }

    public static int[][] matrisKopyala() {
        int yeniBoyut = KareliEkran.labirentt.length + 2;
        System.out.println(KareliEkran.labirentt.length);
        int geciciMatris[][] = new int[yeniBoyut][yeniBoyut];
        for (int i = 0; i < KareliEkran.labirentt.length; i++) {
            for (int j = 0; j < KareliEkran.labirentt[i].length; j++) {
                geciciMatris[i + 1][j + 1] = KareliEkran.labirentt[i][j];
            }
        }
        etrafinaDuvarCek(yeniBoyut, geciciMatris);
        return geciciMatris;
    }

    public static int[][] etrafinaDuvarCek(int yeniboyut, int geciciMatris[][]) {
        for (int i = 0; i < yeniboyut; i++) {
            geciciMatris[0][i] = 1;
            geciciMatris[yeniboyut - 1][i] = 1;
            geciciMatris[i][0] = 1;
            geciciMatris[i][yeniboyut - 1] = 1;
        }
        return geciciMatris;
    }

}




//KareliEkran Sınıfı
import javax.swing.*;
import java.awt.*;
import java.io.IOException;
import java.util.Random;

public class KareliEkran extends JFrame  {
   static JFrame frame;
   static Random random = new Random();

    static int labirentt[][];
    static JPanel jp[][];
    public KareliEkran() throws IOException {
        frame = new JFrame();
        izgara iz = new izgara(izgara.fileName); //sayac alınması için
        izgara.dosyaOku(izgara.fileName);
        labirentt = izgara.matrisKopyala();
        kareOlustur(labirentt.length, labirentt,jp);

    }
        public static void ekraniGoster(){
            for (int i = 0; i < jp.length ; i++) {
                for (int j = 0; j < jp.length; j++) {
                    frame.add(jp[i][j]);
                }
            }
        }
    public static void kareOlustur(int sayi, int labirent[][], JPanel jp[][]) {
        frame.setTitle("Problem 1 Labirent");
        frame.setResizable(true);
        frame.setBounds(0,0,1000,900);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLayout(new GridLayout(sayi,sayi));
        doldur(sayi, labirent, jp);
        frame.setVisible(true);
    }
    public static void BaslangicBelirle(int sayi){
    LabirentBFS.SatirBas = random.nextInt(sayi);
    LabirentBFS.SutunBas= random.nextInt(sayi);
    if(labirentt[LabirentBFS.SatirBas][LabirentBFS.SutunBas] != 0){
        while(labirentt[LabirentBFS.SatirBas][LabirentBFS.SutunBas] !=0){
            LabirentBFS.SatirBas = random.nextInt(sayi);
            LabirentBFS.SutunBas= random.nextInt(sayi);
        }
    }
    jp[LabirentBFS.SatirBas][LabirentBFS.SutunBas].setBackground(Color.black);
    }
    public static void BitisBelirle(int sayi){
        LabirentBFS.SatirBit = random.nextInt(sayi);
        LabirentBFS.SutunBit= random.nextInt(sayi);
        if(labirentt[LabirentBFS.SatirBit][LabirentBFS.SutunBit] != 0){
            while(labirentt[LabirentBFS.SatirBit][LabirentBFS.SutunBit] !=0){
                LabirentBFS.SatirBit = random.nextInt(sayi);
                LabirentBFS.SutunBit= random.nextInt(sayi);
            }
        }
        jp[LabirentBFS.SatirBit][LabirentBFS.SutunBit].setBackground(Color.MAGENTA);
    }
    public static void doldur(int sayi, int geciciMatris[][], JPanel jp[][]) {
        for (int i = 0; i < sayi; i++) {
            for (int j = 0; j < sayi; j++) {
                    jp[i][j] = new JPanel();
                    if (geciciMatris[i][j] != 0) {
                    jp[i][j].setBackground(Color.darkGray);

                } else {
                    jp[i][j].setBackground(Color.gray);
                }
                jp[i][j].setBorder(BorderFactory.createLineBorder(Color.BLACK, 1));
                frame.add(jp[i][j]);
            }
        }
    }
    public static void main(String[] args) throws IOException {

    }


}
//LabirentBFS Sınıfı
import java.awt.*;
import java.io.IOException;
import java.util.Queue;
import java.util.*;

public class LabirentBFS {

    static int SatirBas;
    static int SutunBas;
    static int SatirBit;
    static int SutunBit;
    static int sayac = 0;
    static int speed = 150;
    int time;
    static ArrayList<int[]> gezilenYerler = new ArrayList<>();

    public LabirentBFS() throws IOException {
        KareliEkran ekran = new KareliEkran();
        for (int i = 0; i < KareliEkran.jp.length; i++) {
            for (int j = 0; j < KareliEkran.jp.length; j++) {
                KareliEkran.jp[i][j].setVisible(false);
            }
        }
    }


    public static boolean bitisGorunduMu(int baslangicNoktasi[], int hedefNoktasi[]) {
        int x = hedefNoktasi[0];
        int y = hedefNoktasi[1];
        return KareliEkran.jp[x][y].isVisible();
    }

    public static void bitiseGit(int baslangicNoktasi[], int hedefNoktasi[]) throws InterruptedException {
        if (hedefNoktasi[0] == baslangicNoktasi[0] + 1 && hedefNoktasi[1] == baslangicNoktasi[1]) {
            baslangicNoktasi[0] = baslangicNoktasi[0] + 1;
            KareliEkran.jp[baslangicNoktasi[0]][baslangicNoktasi[1]].setBackground(Color.blue);
        }
        if (hedefNoktasi[0] == baslangicNoktasi[0] - 1 && hedefNoktasi[1] == baslangicNoktasi[1]) {
            baslangicNoktasi[0] = baslangicNoktasi[0] - 1;
            KareliEkran.jp[baslangicNoktasi[0]][baslangicNoktasi[1]].setBackground(Color.blue);
        }
        if (hedefNoktasi[0] == baslangicNoktasi[0] && hedefNoktasi[1] == baslangicNoktasi[1] + 1) {
            baslangicNoktasi[1] = baslangicNoktasi[1] + 1;
            KareliEkran.jp[baslangicNoktasi[0]][baslangicNoktasi[1]].setBackground(Color.blue);
        }
        if (hedefNoktasi[0] == baslangicNoktasi[0] && hedefNoktasi[1] == baslangicNoktasi[1] - 1) {
            baslangicNoktasi[1] = baslangicNoktasi[1] - 1;
            KareliEkran.jp[baslangicNoktasi[0]][baslangicNoktasi[1]].setBackground(Color.blue);
        }
    }

    public static int[] enYakinNoktaBul(int baslangicNoktasi[]) {
        int index = -1;
        Set<int[]> liste = new LinkedHashSet<>();
        for (int[] gecici : gezilenYerler) {
            if (KareliEkran.jp[gecici[0]][gecici[1]].getBackground().equals(Color.gray)) {
                liste.add(gecici);
            }
        }
        double kisaUzunluk = Double.MAX_VALUE;
        double[] enkisaUzunluk = new double[liste.size()];
        int i = 0;
        for (int[] gecici : liste) {
            double uzunluk = Math.sqrt(Math.pow(gecici[1] - baslangicNoktasi[1], 2) + Math.pow(gecici[0] - baslangicNoktasi[0], 2));
            enkisaUzunluk[i] = uzunluk;
            if (uzunluk < kisaUzunluk) {
                kisaUzunluk = uzunluk;
                index = i;
            }
            i++;
        }
        return (int[]) liste.toArray()[index];
    }

    public static ArrayList<int[]> BFS(int[][] labirent, int[] hedefDugumu, int[] baslangicDugumu) throws InterruptedException {
        ArrayList<int[]> komsuYollar = new ArrayList<>();
        Queue<int[]> kuyruk = new LinkedList<>();
        Map<String, int[]> oncekiKonum = new HashMap<>();
        kuyruk.offer(baslangicDugumu);
        oncekiKonum.put(Arrays.toString(baslangicDugumu), null); // Başlangıç düğümünün önceki konumu yok

        while (!kuyruk.isEmpty()) {
            int[] gecici = kuyruk.poll();
            if (Arrays.equals(gecici, hedefDugumu)) {
                int[] konum = gecici;


                while (konum != null) {
                    newAnaEkran.enKisaYol.add(konum);
                    Thread.sleep(speed);
                    boya(konum);
                    System.out.println(Arrays.toString(konum) + "boyandı");
                    etrafiniBoya(konum);
                    konum = oncekiKonum.get(Arrays.toString(konum));
                    sayac++;


                }
                return newAnaEkran.enKisaYol;
            }

            int x = gecici[0];
            int y = gecici[1];
            int[][] komsular = {{x - 1, y}, {x + 1, y}, {x, y - 1}, {x, y + 1}};
            for (int[] komsu : komsular) {
                if (komsu[0] < 0 || komsu[0] >= labirent.length || komsu[1] < 0 || komsu[1] >= labirent[0].length || labirent[komsu[0]][komsu[1]] != 0 || oncekiKonum.containsKey(Arrays.toString(komsu))) {
                    continue;
                }
                komsuYollar.add(komsu);
                kuyruk.offer(komsu);
                oncekiKonum.put(Arrays.toString(komsu), gecici);

            }
        }


        return null;
    }

    public static void rastgeleDolas(int[] baslangicNoktasi, int[] bitisNoktasi) throws InterruptedException {

        sayac++;
        if ((bitisNoktasi[0] == baslangicNoktasi[0] && baslangicNoktasi[1] == bitisNoktasi[1] + 1) || (bitisNoktasi[0] == baslangicNoktasi[0] && baslangicNoktasi[1] == bitisNoktasi[1] - 1)) {
            newAnaEkran.degerGoster.setText("HEMEN YANINDA");

        } else if ((bitisNoktasi[1] == baslangicNoktasi[1] && baslangicNoktasi[0] == bitisNoktasi[0] + 1) || (bitisNoktasi[1] == baslangicNoktasi[1] && baslangicNoktasi[0] == bitisNoktasi[0] - 1)) {
            newAnaEkran.degerGoster.setText("HEMEN YANINDA");
        } else if (Arrays.equals(baslangicNoktasi, bitisNoktasi)) {
            newAnaEkran.degerGoster.setText("BAŞLANGIÇ VE HEDEF\nNOKTASI AYNI YERDİR");
        } else {
            while (!Arrays.equals(baslangicNoktasi, bitisNoktasi)) {

                Random rand = new Random();
                Thread.sleep(speed);
                int x = baslangicNoktasi[0];
                int y = baslangicNoktasi[1];
                int rastgeleSayi = 0;
                if (bitisGorunduMu(baslangicNoktasi, bitisNoktasi)) {
                    bitiseGit(baslangicNoktasi, bitisNoktasi);
                    break;
                } else {
                    if (KareliEkran.jp[x - 1][y].getBackground().equals(Color.gray) || KareliEkran.jp[x + 1][y].getBackground().equals(Color.gray) || KareliEkran.jp[x][y - 1].getBackground().equals(Color.gray) || KareliEkran.jp[x][y + 1].getBackground().equals(Color.gray)) {
                        if (KareliEkran.jp[x - 1][y].getBackground().equals(Color.gray)) rastgeleSayi = 1;
                        else if (KareliEkran.jp[x][y - 1].getBackground().equals(Color.gray)) rastgeleSayi = 3;
                        else if (KareliEkran.jp[x + 1][y].getBackground().equals(Color.gray)) rastgeleSayi = 0;
                        else if (KareliEkran.jp[x][y + 1].getBackground().equals(Color.gray)) rastgeleSayi = 2;
                    } else {
                        int[] gecici = enYakinNoktaBul(baslangicNoktasi);
                        ArrayList<int[]> geciciArraylist = new ArrayList<>();
                        geciciArraylist = BFS(KareliEkran.labirentt, gecici, baslangicNoktasi);
                        for (int i = 0; i < geciciArraylist.size(); i++) {
                            int ekranGecici[] = geciciArraylist.get(i);
                            if (KareliEkran.jp[ekranGecici[0]][ekranGecici[1]].getBackground().equals(Color.pink)) {
                                KareliEkran.jp[ekranGecici[0]][ekranGecici[1]].setBackground(Color.blue);
                            }
                        }
                        System.out.println("Başlangıc : " + Arrays.toString(baslangicNoktasi));
                        rastgeleSayi = rand.nextInt(4);

                        if (KareliEkran.jp[baslangicNoktasi[0] - 1][baslangicNoktasi[1]].getBackground().equals(Color.gray) || KareliEkran.jp[baslangicNoktasi[0] + 1][baslangicNoktasi[1]].getBackground().equals(Color.gray) || KareliEkran.jp[baslangicNoktasi[0]][baslangicNoktasi[1] - 1].getBackground().equals(Color.gray) || KareliEkran.jp[baslangicNoktasi[1]][baslangicNoktasi[1] + 1].getBackground().equals(Color.gray)) {

                            if (KareliEkran.jp[baslangicNoktasi[0] - 1][baslangicNoktasi[1]].getBackground().equals(Color.gray))
                                rastgeleSayi = 1;
                            else if (KareliEkran.jp[baslangicNoktasi[0] + 1][baslangicNoktasi[1]].getBackground().equals(Color.gray))
                                rastgeleSayi = 0;

                            else if (KareliEkran.jp[baslangicNoktasi[0]][baslangicNoktasi[1] - 1].getBackground().equals(Color.gray))
                                rastgeleSayi = 3;


                            else if (KareliEkran.jp[baslangicNoktasi[0]][baslangicNoktasi[0] + 1].getBackground().equals(Color.gray))
                                rastgeleSayi = 2;

                        }
                        baslangicNoktasi[0] = gecici[0];
                        baslangicNoktasi[1] = gecici[1];
                        System.out.println("Baslangic Sonra : " + Arrays.toString(baslangicNoktasi));
                    }

                    switch (rastgeleSayi) {
                        case 0 -> {
                            if (KareliEkran.labirentt[baslangicNoktasi[0] + 1][baslangicNoktasi[1]] == 0) {
                                baslangicNoktasi[0] = baslangicNoktasi[0] + 1;
                                EkrandaYerGoster(baslangicNoktasi);

                            }
                        }
                        case 1 -> {
                            if (KareliEkran.labirentt[baslangicNoktasi[0] - 1][baslangicNoktasi[1]] == 0) {
                                baslangicNoktasi[0] = baslangicNoktasi[0] - 1;
                                EkrandaYerGoster(baslangicNoktasi);
                            }
                        }
                        case 2 -> {

                            if (KareliEkran.labirentt[baslangicNoktasi[0]][baslangicNoktasi[1] + 1] == 0) {
                                baslangicNoktasi[1] = baslangicNoktasi[1] + 1;
                                EkrandaYerGoster(baslangicNoktasi);
                            }
                        }
                        case 3 -> {
                            if (KareliEkran.labirentt[baslangicNoktasi[0]][baslangicNoktasi[1] - 1] == 0) {
                                baslangicNoktasi[1] = baslangicNoktasi[1] - 1;
                                EkrandaYerGoster(baslangicNoktasi);


                            }
                        }
                    }
                }
            }
        }
    }

    private static void EkrandaYerGoster(int[] baslangicNoktasi) throws InterruptedException {

        KareliEkran.jp[baslangicNoktasi[0]][baslangicNoktasi[1]].setBackground(Color.red);
        Thread.sleep(speed);
        KareliEkran.jp[baslangicNoktasi[0]][baslangicNoktasi[1]].setBackground(Color.blue);

        sayac++;
        newAnaEkran.degerGoster.setText("\tADIM SAYISI : " + sayac + "");
        etrafiniBoya(baslangicNoktasi);
    }


    public static void etrafiniBoya(int konum[]) {
        KareliEkran.jp[konum[0] - 1][konum[1]].setVisible(true);
        gezilenYerler.add(new int[]{konum[0] - 1, konum[1]});
        KareliEkran.jp[konum[0] + 1][konum[1]].setVisible(true);
        gezilenYerler.add(new int[]{konum[0] + 1, konum[1]});
        KareliEkran.jp[konum[0]][konum[1] - 1].setVisible(true);
        gezilenYerler.add(new int[]{konum[0], konum[1] - 1});
        KareliEkran.jp[konum[0]][konum[1] + 1].setVisible(true);
        gezilenYerler.add(new int[]{konum[0], konum[1] + 1});

    }

    public static void baslangicBoya() {
        KareliEkran.jp[SatirBas][SutunBas].setBackground(Color.BLACK);
        KareliEkran.jp[SatirBas][SutunBas].setVisible(false);
    }

    public static void baslangicBitisBelirle() {
        KareliEkran.BaslangicBelirle(izgara.sayac);
        KareliEkran.BitisBelirle(izgara.sayac);
    }

    public static void bitisBoya() {
        KareliEkran.jp[SatirBas][SutunBas].setBackground(Color.black);
        KareliEkran.jp[SatirBit][SutunBit].setBackground(Color.magenta);
    }

    public static void boya(int konum[]) {
        KareliEkran.jp[konum[0]][konum[1]].setBackground(Color.pink);
    }

    public static void tumEkraniGoster() {
        for (int i = 0; i < KareliEkran.jp.length; i++) {
            for (int j = 0; j < KareliEkran.jp.length; j++) {
                if (!KareliEkran.jp[i][j].isVisible()) {
                    KareliEkran.jp[i][j].setVisible(true);
                }


            }
        }
    }

    public static void sifirla() {

        SatirBas = 0;
        SatirBit = 0;
        SutunBas = 0;
        SutunBit = 0;
        KareliEkran.labirentt = null;
        KareliEkran.jp = null;
        izgara.sayac = 0;
        izgara.satir = 0;
        izgara.sutun = 0;
        izgara.sayack = 0;
        KareliEkran.frame = null;
        LabirentBFS.speed = 150;
        LabirentBFS.sayac = 0;
    }

    public static void main(String[] args) throws IOException, InterruptedException {


    }


}
//MazeCreator Sınıfı
import java.util.*;

public class MazeCreator {
    private static int width;
    private static int height;
    private static int[][] maze;
    private Random rand;
    public static int[][] getMaze() {
        return maze;
    }
    public static int getHeight() {
        return height;
    }
    public static int getWidth() {
        return width;
    }
    public MazeCreator(int width, int height) {
        this.width = width;
        this.height = height;
        maze = new int[height+1][width+1];
        rand = new Random();
        for (int i = 0; i < height ;i++) {
            for (int j = 0; j <width; j++) {
                maze[i][j]=1;
            }
        }
        generateMaze();
        for(int i=0; i<width+1;i++){
            maze[height][i]=1;
        }
        for(int i=0; i<height+1;i++){
            maze[i][width]=1;
        }
    }

    private void generateMaze() {
        int startX =1;
        int startY=1;
        maze[startY][startX] = 0;
        Stack<int[]> stack = new Stack<>();
        stack.push(new int[]{startY, startX});
        while (!stack.isEmpty()) {
            int[] current = stack.peek();
            int currentY = current[0];
            int currentX = current[1];
            List<int[]> komsular = ziyaretEdilmeyenKomsuBul(currentX, currentY);
            if (!komsular.isEmpty()) {
                // Rastgele komşu seç
                int[] neighbor = komsular.get(rand.nextInt(komsular.size()));
                int neighborY = neighbor[0];
                int neighborX = neighbor[1];
                // Seçili komşuyla aradaki duvarı kaldır.
                int wallY = (currentY + neighborY) / 2;
                int wallX = (currentX + neighborX) / 2;
                maze[wallY][wallX] = 0;
                maze[neighborY][neighborX] = 0;
                // Stack'e komşu ekle
                stack.push(neighbor);
            } else {
                // Backtrack if there are no unvisited komsular
                stack.pop();
            }
        }
    }
    private List<int[]> ziyaretEdilmeyenKomsuBul(int x, int y) {
        List<int[]> neighbors = new ArrayList<>();

        // Yukarıdaki komşuya bak
        if (y > 1 && maze[y - 2][x] == 1) {
            neighbors.add(new int[]{y - 2, x});
        }
        // Aşağıdaki komşuya bak
        if (y < height - 2 && maze[y + 2][x] == 1) {
            neighbors.add(new int[]{y + 2, x});
        }
        // soldaki komşuya bak
        if (x > 1 && maze[y][x - 2] == 1) {
            neighbors.add(new int[]{y, x - 2});
        }
        // sağdaki komşuya bak
        if (x < width - 2 && maze[y][x + 2] == 1) {
            neighbors.add(new int[]{y, x + 2});
        }
        return neighbors;
    }
    public void printMaze() {
        for (int[] row : maze) {
            for (int cell : row) {
                System.out.print(cell == 1 ? "+ " : "0 ");
            }
            System.out.println();
        }
    }
    public static void main(int width,int height) {

        MazeCreator mazeCreator = new MazeCreator(width, height);
        mazeCreator.printMaze();
    }
}
//NewAnaEkran sınıfı

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;
import java.util.TimerTask;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.Timer;


public class newAnaEkran {

    static JButton sureEkrani= new JButton();
    JButton problembirButton = new JButton();
    JButton problemikiButton = new JButton();
    JButton baslaButonu=new JButton();
    JButton bitirButonu=new JButton();
    JButton urlButonu=new JButton();
    static JButton degerGoster = new JButton();

    static ArrayList<int[]> enKisaYol = new ArrayList<>();
    ExecutorService executor = Executors.newSingleThreadExecutor();


    public void oyunCalistir (){
        problembirButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                JFrame menu = new JFrame("OYUN MENÜSÜ");
                menu.setLayout(new GridLayout(1,5));
                baslaButonu.setBackground(Color.green);
                menu.setVisible(true);
                menu.setBounds(900,40,1000,300);
                menu.add(baslaButonu,BorderLayout.CENTER);
                baslaButonu.setText("OYUNA BAŞLA");
                baslaButonu.addActionListener(new ActionListener() {

                    @Override
                    public void actionPerformed(ActionEvent e) {
                        executor.execute(new Runnable() {
                            public void run() {
                                try {
                                    
                                    sureEkrani.setVisible(false);
                                    LabirentBFS.sayac = 0;
                                    oyun oyun = new oyun();
                                    sureEkrani.setVisible(true);
                                } catch (InterruptedException ex) {
                                    throw new RuntimeException(ex);
                                } catch (IOException ex) {
                                    throw new RuntimeException(ex);
                                }

                            }

                        });
                    }
                });

                bitirButonu.setBackground(Color.yellow);
                bitirButonu.setText("HIZLI BİTİR");
                menu.add(bitirButonu,BorderLayout.CENTER);
                bitirButonu.addActionListener(new ActionListener() {

                    @Override
                    public void actionPerformed(ActionEvent e) {
                        enKisaYol.clear();
                        LabirentBFS.speed = 0;


                        try {Thread.sleep(400);
                        } catch (InterruptedException ex) {
                            throw new RuntimeException(ex);
                        }

                        try {
                            enKisaYol = LabirentBFS.BFS(KareliEkran.labirentt,oyun.geciciBitis,oyun.geciciBaslangic);
                            LabirentBFS.bitisBoya();
                        } catch (InterruptedException ex) {
                            throw new RuntimeException(ex);
                        }
                       // System.out.println(enKisaYol.size());

                    }
                });
            menu.add(urlButonu,BorderLayout.CENTER);
            urlButonu.setBackground(Color.gray);
            urlButonu.setText("URL DEĞİŞTİR");

            urlButonu.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    if(izgara.fileName.indexOf(izgara.urlBir) != -1){
                        izgara.fileName = izgara.normalHal+izgara.urliki;
                    }
                    else{
                        izgara.fileName = izgara.normalHal + izgara.urlBir;
                    }
                }
            });
            degerGoster.setBackground(Color.CYAN);
            menu.add(degerGoster,BorderLayout.CENTER);

                sureEkrani.setBackground(Color.pink);
                menu.add(sureEkrani,BorderLayout.CENTER);

            }


        });


        problemikiButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Arayuz arayuz = new Arayuz();
            }
        });



    }



    public newAnaEkran (){
        JFrame anaEkran = new JFrame("ANA EKRAN");
        anaEkran.setBounds(500,50,500,800);
        anaEkran.setVisible(true);
        anaEkran.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        anaEkran.setLayout(null);
        anaEkran.setBackground(Color.black);
        problembirButton.setText("PROBLEM 1 ");
        problembirButton.setBounds(150,200,200,100);
        anaEkran.getContentPane().add(problembirButton);
        problemikiButton.setText("PROBLEM 2 ");
        problemikiButton.setBounds(150,400,200,100);
        anaEkran.getContentPane().add(problemikiButton);
        problemikiButton.setBackground(Color.pink);
        problembirButton.setBackground(Color.pink);



    }

    public static void main(String[] args) throws InterruptedException, IOException {

    newAnaEkran anaEkran1 = new newAnaEkran();
    anaEkran1.oyunCalistir();

}

}

//Oyun Sınıfı
import java.awt.*;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Arrays;

public class oyun {
    static int geciciBaslangic[] = new int[2];
    static int geciciBitis[] = new int[2];

    public oyun() throws InterruptedException, IOException {
        long startTime = System.currentTimeMillis();
        File dosya = new File("En Kısa Yol Koordinati.txt");
        if(!dosya.exists()){
            dosya.createNewFile();
        }
        FileWriter dosyaYaz = new FileWriter(dosya,false);
        BufferedWriter buff = new BufferedWriter(dosyaYaz);
        LabirentBFS.sifirla();
        try {
            LabirentBFS lab = new LabirentBFS();
        } catch (IOException ex) {
            throw new RuntimeException(ex);
        }
        LabirentBFS.baslangicBitisBelirle();

        int[] baslangicDugumu = {LabirentBFS.SatirBas, LabirentBFS.SutunBas};
        int[] hedefDugumu = {LabirentBFS.SatirBit, LabirentBFS.SutunBit};
        System.arraycopy(baslangicDugumu, 0, geciciBaslangic, 0, baslangicDugumu.length);
        System.arraycopy(hedefDugumu, 0, geciciBitis, 0, baslangicDugumu.length);
        LabirentBFS.baslangicBoya();
        try {
            LabirentBFS.rastgeleDolas(baslangicDugumu, hedefDugumu);
        } catch (InterruptedException ex) {
            throw new RuntimeException(ex);
        }
        newAnaEkran.enKisaYol = LabirentBFS.BFS(KareliEkran.labirentt, geciciBitis, geciciBaslangic);
        LabirentBFS.bitisBoya();
        LabirentBFS.tumEkraniGoster();
        double endTime = System.currentTimeMillis();
        double total = endTime - startTime;
        newAnaEkran.sureEkrani.setText("GEÇEN SÜRE : " + (total / 1000) + " saniye ");
        System.out.println(newAnaEkran.enKisaYol.size());
        buff.write("Başlangıç Koordinatı : [" + LabirentBFS.SatirBas +" " + LabirentBFS.SutunBas+ "]\n");
        buff.write("Hedef Koordinatı : [" + LabirentBFS.SatirBit + " " + LabirentBFS.SutunBit+"] \n");
        buff.write("EN KISA YOL KOORDİNATLARI\n");
        buff.write("[" + LabirentBFS.SatirBas+"," + " " + LabirentBFS.SutunBas+ "] \n");
        for (int i = newAnaEkran.enKisaYol.size()-1; i >-1 ; i--) {
                int gecici[] = newAnaEkran.enKisaYol.get(i);
                if(KareliEkran.jp[gecici[0]][gecici[1]].getBackground().equals(Color.pink)){
                   buff.write(Arrays.toString(newAnaEkran.enKisaYol.get(i)) + "\n");
                }
        }
        buff.write("[" + LabirentBFS.SatirBit+"," + " " + LabirentBFS.SutunBit+ "] \n");

        buff.close();
    }


}
